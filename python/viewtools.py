'''
Things useful in view generation

Reference
======================================================================
'''

# Standard imports:
import collections
import HTMLParser
import itertools

def columnizedList(things, columnCount):
    q, r = divmod(len(things), columnCount)

    # The number of *extra* items in each column (1 or 0)
    extras = [int(bool(x)) for x in reversed(range(r + 1))]
    if len(extras) < columnCount:
        extras.extend([0] * columnCount)

    # The number of total items in each column (count + 1 or count)
    counts = [q + x for x in extras]

    begin = 0
    for count in counts:
        yield things[begin : begin + count]
        begin += count

class IdentityHTMLParser(HTMLParser.HTMLParser):
    '''
    Produces identical output when fed a calendar generated by
    ``calendar.HTMLCalendar``.
    '''

    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.tokens = []

    @property
    def html(self):
        return ''.join(self.tokens)

    def handle_starttag(self, tag, attrs):
        attrs = collections.OrderedDict(attrs)

        if len(attrs) == 0:
            startTag = '<%s>' % tag
        else:
            attrTokens = [
                '%s="%s"' % (key, value)
                for key, value in attrs.iteritems()
                ]
            startTag = '<%s %s>' % (tag, ' '.join(attrTokens))
        self.tokens.append(startTag)

    def handle_endtag(self, tag):
        self.tokens.append('</%s>' % tag)

    def handle_data(self, data):
        self.tokens.append(data)

    def handle_entityref(self, name):
        self.tokens.append('&%s;' % name)
